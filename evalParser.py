#! /usr/bin/env python
import evalModel as EM
import urllib, urllib2, cookielib, re, string
from bs4 import BeautifulSoup
from getpass import getpass

#Takes as input a 4-letter department code
#Outputs an opener object, and a file object.
def connect(deptCode):
    password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()

    top_level_url = "https://evaluations-uchicago-edu.proxy.uchicago.edu"
    url = "https://evaluations-uchicago-edu.proxy.uchicago.edu/list.cfm"

    username = raw_input("CNET ID: ")
    password = getpass()

    password_mgr.add_password(None, top_level_url, username, password)

    authHandler = urllib2.HTTPBasicAuthHandler(password_mgr)

    cj = cookielib.CookieJar()
    cookHandler = urllib2.HTTPCookieProcessor(cj)

    opener = urllib2.build_opener(authHandler, cookHandler)
    opener.open(url)
    urllib2.install_opener(opener)

    dept = urllib.urlencode({'Department': deptCode})

    f = urllib2.urlopen(url, dept)

    return opener, f
    

def isNum(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

# Parses Teacher Evaluation Stats
# Input: a BeautifulSoup object, and a keyword, corresponding to the type of stat
# Outputs a list of ints: [N/A, SD, D, N, A, SA]
def getEvalStats(soup, keyword):
    stats = [] # Results table
    table = soup.find(text=re.compile(keyword)).parent.parent.findAll("td", "response")
    for row in table:
        try:
            val = row.contents[0].encode('ascii')
            if isNum(val):
                stats.append(int(row.contents[0].encode('ascii')))
        except UnicodeEncodeError:
            pass
    return stats
    
    
# This function takes an opener for a page with a list of courses (generated by connect()), and outputs a list of links 
# to access the evals page for those courses.    
def parseCourseListPage(listOfClassesOpener):
    coursepage = listOfClassesOpener.read()
    coursesoup = BeautifulSoup(coursepage)
    
    listOfLinks = []
    try:
        allLinks = coursesoup.findAll('a')
        numClasses = len(allLinks) - 7
        for i in range(numClasses):
            urlAddOn = allLinks[i]["href"].encode('ascii')
            if urlAddOn.find("olcourseid") > 0:
                listOfLinks.append(allLinks[i]["href"].encode('ascii'))
        
        return listOfLinks
            
    except AttributeError, TypeError:
        return
    
    
        
# This function takes a given page url (corresponding to one page of courseevals)
# , a connection opener, a url, and returns a teacher object, and a dictionary of stats
def parsePage(fullUrl, opener):  
    coursepage = opener.open(fullUrl).read()
    coursesoup = BeautifulSoup(coursepage)
    # parse the relevant information into the proper variables
    try:
        info       = coursesoup.span.contents[1].split()
        dept       = info[0]
        coursename = info[1]
        avetime    = coursesoup.findAll('strong')[2].parent.findAll('td')[5].string
        quarter    = re.split('<', re.split('Quarter', coursepage)[1][6:100])[0]
        teacher    = coursesoup.findAll('b')[3].next.next[1:].encode('ascii', 'ignore')
        
        statDict = {} # Dictionary for Evaluation stats, organized by keyword
        
        organizedStats = getEvalStats(coursesoup, "organized")
        if sum(organizedStats) > 0:
            statDict['organized'] = organizedStats
        
        understandableStats = getEvalStats(coursesoup, "understandable")
        if sum(understandableStats) > 0:
            statDict['understandable'] = understandableStats
        
        interestingStats = getEvalStats(coursesoup, "interesting")
        if sum(interestingStats) > 0:
            statDict['interesting'] = interestingStats
        
        attitudeStats = getEvalStats(coursesoup, "attitude")
        if sum(attitudeStats) > 0:
            statDict['attitude'] = attitudeStats
        
        accessibleStats = getEvalStats(coursesoup, "accessible")
        if sum(accessibleStats) > 0:
            statDict['accessible'] = accessibleStats
        
        recommendStats = getEvalStats(coursesoup, "would recommend")
        if sum(recommendStats) > 0:
            statDict['overall'] = recommendStats
        
        newTeacher = EM.Teacher(teacher, statDict)
        
        return newTeacher, statDict
            
        
    except AttributeError:
        return
    if not isNum(avetime):
        avetime = coursesoup.findAll('strong')[9].parent.findAll('td')[5].string
    
